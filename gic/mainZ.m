s = dbstack;
n = s(1).name;

mu_0 = 4*pi*1e-7; % Vacuum permeability

N = size(B,1);
if mod(N,2) ~= 0
  fprintf('%s: Removing last value to make # values even.\n');
  B = B(1:end-1,:);
  dB = dB(1:end-1,:);
  E = E(1:end-1,:);
end
N = size(B,1);

f   = [0:N/2]'/N;

IN   = dB;
INs  = labels(4:5);
INs2 = labels2(4:5);

dim = 1;

meth = 'rectangular';
df   = 20;
methstr = sprintf('Method = Rectangular; df = %d',df);

meth = 'parzen';
methstr = 'Method = Parzen';
df = []; % Use points generated by evalfreq.

%meth = 'bartlett';
%methstr = 'Method = Bartlett';
%df = []; % Use points generated by evalfreq.

tit  = sprintf('%s; Input = dB/dt; %s',short,methstr);

ts1 = datestr(dn(1),30);
ts2 = datestr(dn(end),30);

Itr = [1:size(IN,1)];
Ite = [1:size(IN,1)];

% Training points (in-sample)
%Itr = [1:2*86400];
% Test points (out-of-sample)
%Ite = [2*86400+1:size(IN,1)];

hp = 0;
if (hp)
    label   = 'hp'; 
    Nf      = 800;
    tx      = exp(-[0:Nf]/Nf);
    Ef(:,1) = filter([0,tx/sum(tx)],1,E(:,1));
    Ef(:,2) = filter([0,tx/sum(tx)],1,E(:,2));
    tit     = 'Using filtered E to derive TF';
else
    label = 'nohp';
    Ef    = 0*E;
    Nf    = 0;
    tit   = 'Using measured E to derive TF';
end

E = E-Ef;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% OSU-calculated Z
addpath('iris');
fprintf('\n%s\n',repmat('-',80,1));
xmlfile = sprintf('./data/iris/%s/%s.xml',short,short);
fprintf('%s: Reading OSU transfer function.\n',n);
addpath('../xml');
D   = readEDIXML(short);
feA = transpose(1./D.PERIOD);
ZA  = transpose(D.Z);
% Z units are [mV/km]/[nT] (see xml file)

% Zxx Zxy Zyx Zyy -> (Zyy Zyx Zxy Zxx)
% Unless this is done, predictions using OSU model are very poor
% (PE < 0) and inconsistencies with my calculation of Z
% (Zxx and Zyy are reversed)
ZA = fliplr(ZA);

% Order fe and Z by increasing frequency.
[feA,I] = sort(feA);
ZA = ZA(I,:);

% Add zero frequency
ZA  = [0,0,0,0;ZA];
feA = [0;feA];

% Apparent Resistivity
for k = 1:size(ZA,2)
  RA(:,k) = 1e6*(mu_0./(2*pi*feA(2:end))).*(abs(ZA(2:end,k)).^2);
end

fprintf('\n')
fprintf('%s: Computing interpolated transfer function.\n',n)
% Interpolate transfer function onto original frequency grid
ZAi = Zinterp(feA,ZA,f);

fprintf('\n')

% Predict using interpolated transfer function
fprintf('%s: Computing predictions.\n',n)
EpA = Zpredict(feA,ZA,[B(:,1),B(:,2)]);
EpA = real(EpA);

pevA(1) = pe(E(:,1),EpA(:,1));
pevA(2) = pe(E(:,2),EpA(:,2));
fprintf('%s: OSU\n',n);
fprintf('%s: x: Nfilt = %4d\tpe = %0.2f\n',n,Nf,pevA(1))
fprintf('%s: y: Nfilt = %4d\tpe = %0.2f\n',n,Nf,pevA(2))
fprintf('\n')

HA  = Z2H(feA,ZA,f);
HA  = fftshift(HA,1);
NA  = (size(HA,1)-1)/2;
tA  = [-NA:NA]';

% Transfer Function Phase
PA  = (180/pi)*atan2(imag(ZA),real(ZA));
fprintf('%s\n',repmat('-',80,1));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Use USGS apparent resistivity to compute transfer function
addpath('zplanewave')
fprintf('\n%s\n',repmat('-',80,1));
fprintf('%s: Reading USGS Conductivity Models.\n',n);
rho_h = load('USGSmodels/CP1_GroundModel.txt');
s = 1./rho_h(:,1)';
s(end+1) = s(end);
h = rho_h(:,2)';
mu_0 = 4*pi*1e-7; % Vacuum permeability

C    = zplanewave(s,h,f(2:end));
C   = [0;transpose(C)];
ZU1  = j*2*pi*f.*C/1e3; % 2*pi*f*C has units of 
EpU1 = 1e3*real(Zpredict(f,ZU1,B));

pevU1(1) = pe(E(:,1),EpU1(:,1));
pevU1(2) = pe(E(:,2),EpU1(:,2));
fprintf('%s: USGS CP-1\n',n);
fprintf('%s: x: Nfilt = %4d\tpe = %0.2f\n',n,Nf,pevU1(1))
fprintf('%s: y: Nfilt = %4d\tpe = %0.2f\n',n,Nf,pevU1(2))
fprintf('\n')

rho_h = load('USGSmodels/PT1_GroundModel.txt');
s = 1./rho_h(:,1)';
s(end+1) = s(end);
h = rho_h(:,2)';
mu_0 = 4*pi*1e-7; % Vacuum permeability

C   = zplanewave(s,h,f(2:end));
C   = [0;transpose(C)];
ZU2 = j*2*pi*f.*C/1e3;
EpU2 = 1e3*real(Zpredict(f,ZU2,B));

pevU2(1) = pe(E(:,1),EpU2(:,1));
pevU2(2) = pe(E(:,2),EpU2(:,2));
fprintf('%s: USGS PT-1\n',n);
fprintf('%s: x: Nfilt = %4d\tpe = %0.2f\n',n,Nf,pevU2(1))
fprintf('%s: y: Nfilt = %4d\tpe = %0.2f\n',n,Nf,pevU2(2))
fprintf('%s\n',repmat('-',80,1));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute transfer function using transferfnFD.m
fprintf('\n%s\n',repmat('-',80,1))
fprintf('%s: Computing transfer function.\n',n)
[ZR,feR] = transferfnFD(IN(Itr,:),E(Itr,:),dim,meth,df);

if (0)
    I = find(feR > feA(2) & feR < feA(end));
    ZR = ZR(I,:);
    feR = feR(I);
end

HR = Z2H(feR,ZR,f);
HR = fftshift(HR,1);
NR = (size(HR,1)-1)/2;
tR = [-NR:NR]';

% Apparent Resistivity
for k = 1:size(ZR,2)
    RR(:,k) = 1e6*(mu_0./(2*pi*feR(2:end))).*(abs(ZR(2:end,k)).^2);
end
fprintf('\n')
fprintf('%s: Computing interpolated transfer function.\n',n)
% Interpolate transfer function onto original frequency grid
ZRi = Zinterp(feR,ZR,f);

fprintf('\n')
fprintf('%s: Computing predictions.\n',n)
% Predict using interpolated transfer function
EpR = Zpredict(feR,ZR,IN);

% Transfer Function Phase
PR  = (180/pi)*atan2(imag(ZR),real(ZR));

pev(1) = pe(E(Itr,1),EpR(Itr,1));
pev(2) = pe(E(Itr,2),EpR(Itr,2));
fprintf('\n')
fprintf('%s: In-sample\n',n);
fprintf('%s: x: Nfilt = %4d\tpe = %0.2f\n',n,Nf,pev(1))
fprintf('%s: y: Nfilt = %4d\tpe = %0.2f\n',n,Nf,pev(2))

if length(Itr) ~= length(Ite)
  pev(1) = pe(E(Ite,1),EpR(Ite,1));
  pev(2) = pe(E(Ite,2),EpR(Ite,2));

  fprintf('%s: Out-of-sample\n',n);
  fprintf('%s: x: Nfilt = %4d\tpe = %0.2f\n',n,Nf,pev(1))
  fprintf('%s: y: Nfilt = %4d\tpe = %0.2f\n',n,Nf,pev(2))
end
fprintf('%s\n',repmat('-',80,1))
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%