s = dbstack;
n = s(1).name;

mu_0 = 4*pi*1e-7; % Vacuum permeability

N   = size(B,1);
f   = [0:N/2]'/N;

IN   = dB;
INs  = labels(4:5);
INs2 = labels2(4:5);

dim = 1;

meth = 'rectangular';
df   = 20;
methstr = sprintf('Method = Rectangular; df = %d',df);
%df = []; % Use points generated by evalfreq.

meth = 'parzen';
methstr = 'Method = Parzen';
df = []; % Use points generated by evalfreq.

%meth = 'bartlett';
%methstr = 'Method = Bartlett';
%df = []; % Use points generated by evalfreq.

tit  = sprintf('%s; Input = dB/dt; %s',short,methstr);

ts1 = datestr(dn(1),30);
ts2 = datestr(dn(end),30);

Itr = [1:size(IN,1)];
Ite = [1:size(IN,1)];

% Training points (in-sample)
%Itr = [1:2*86400];
% Test points (out-of-sample)
%Ite = [2*86400+1:size(IN,1)];

if (1)
    label = 'hp'
    Nf      = 1600;
    tx      = exp(-[0:Nf]/Nf);
    Ef(:,1) = filter([0,tx/sum(tx)],1,E(:,1));
    Ef(:,2) = filter([0,tx/sum(tx)],1,E(:,2));
    tit       = 'Using filtered E to derive TF';
else
    label = 'nohp'
    Ef    = 0*E;
    Nf    = 0;
    tit   = 'Using measured E to derive TF';
end

E = E-Ef;

if strmatch('MBB05',short,'exact')
    % Alternative estimate of Z

    fprintf('\n')
    fprintf('%s: Reading alternative transfer function.\n',n)

    D = readEDIXML('./data/iris/MBB05c_B6a.xml')
    feA = transpose(1./D.PERIOD);
    ZA  = transpose(D.Z);

    %ZAo  = transpose(D.Z);
    % Zxx: ZAo(:,1)
    % Zxy: ZAo(:,2)
    % Zyy: ZAo(:,3)
    % Zyx: ZAo(:,4)
    % y = east, x = north

    %ZA(:,1) = ZAo(:,3);
    %ZA(:,2) = ZAo(:,4);
    %ZA(:,3) = ZAo(:,1);
    %ZA(:,4) = ZAo(:,2);

    % Order Z by increasing frequency.
    [feA,I] = sort(feA);
    ZA = ZA(I,:);

    % Add zero frequency
    ZA  = [0,0,0,0;ZA];
    feA = [0;feA];


    % Apparent Resistivity
    for k = 1:size(ZA,2)
        RA(:,k) = 1e6*(mu_0./(2*pi*feA(2:end))).*(abs(ZA(2:end,k)).^2);
    end

    fprintf('\n')
    fprintf('%s: Computing interpolated transfer function.\n',n)
    % Interpolate transfer function onto original frequency grid
    ZAi = Zinterp(feA,ZA,f);

    fprintf('\n')
    fprintf('%s: Computing predictions.\n',n)
    % Predict using interpolated transfer function

    %New calculation
    %E(:,1) = B(:,1)*ZA(:,1)+B(:,2)*ZA(:,2))
    %E(:,2) = B(:,1)*ZA(:,3)+B(:,2)*ZA(:,4))
    %ZA(:,1) = ZAo(:,3);
    %ZA(:,2) = ZAo(:,4);
    %ZA(:,3) = ZAo(:,1);
    %ZA(:,4) = ZAo(:,2);

    %EpA = Zpredict(feA,ZA,B(:,1:2));

    %Calculation that works
    %E(:,1) = -(B(:,2)*ZAo(:,1)+B(:,1)*ZAo(:,2))
    %E(:,2) = -(B(:,2)*ZAo(:,3)+B(:,1)*ZAo(:,4))

    EpA = Zpredict(feA,ZA,[B(:,2),B(:,1)]);

    EpA = real(EpA);

    tmp = EpA;
    EpA(:,1) = -1e3*tmp(:,2);
    EpA(:,2) = -1e3*tmp(:,1);

    pevA(1) = pe(E(:,1),EpA(:,1))
    pevA(2) = pe(E(:,2),EpA(:,2))
    fprintf('%s: OSU\n',n);
    fprintf('%s: x: Nf = %04d\tpe = %0.2f\n',n,Nf,pevA(1))
    fprintf('%s: y: Nf = %04d\tpe = %0.2f\n',n,Nf,pevA(2))
    fprintf('\n')

    HA  = Z2H(feA,ZA,f);
    HA  = fftshift(HA,1);
    NA  = (size(HA,1)-1)/2;
    tA  = [-NA:NA]';

    % Transfer Function Phase
    PA  = (180/pi)*atan2(imag(ZA),real(ZA));

    addpath('zplanewave')
    rho_h = load('USGSModels/CP1_GroundModel.txt');
    s = 1./rho_h(:,1)';
    s(end+1) = s(end);
    h = rho_h(:,2)';
    mu_0 = 4*pi*1e-7; % Vacuum permeability

    C    = zplanewave(s,h,f(2:end));
    C   = [0;transpose(C)];
    ZU1  = j*2*pi*f.*C/1e3; % 2*pi*f*C has units of 
    EpU1 = 1e3*real(Zpredict(f,ZU1,B));

    pevU1(1) = pe(E(:,1),EpU1(:,1));
    pevU1(2) = pe(E(:,2),EpU1(:,2));
    fprintf('%s: USGS CP-1\n',n);
    fprintf('%s: x: Nf = %04d\tpe = %0.2f\n',n,Nf,pevU1(1))
    fprintf('%s: y: Nf = %04d\tpe = %0.2f\n',n,Nf,pevU1(2))
    fprintf('\n')

    rho_h = load('USGSModels/PT1_GroundModel.txt');
    s = 1./rho_h(:,1)';
    s(end+1) = s(end);
    h = rho_h(:,2)';
    mu_0 = 4*pi*1e-7; % Vacuum permeability

    C   = zplanewave(s,h,f(2:end));
    C   = [0;transpose(C)];
    ZU2 = j*2*pi*f.*C/1e3;
    EpU2 = 1e3*real(Zpredict(f,ZU2,B));

    pevU2(1) = pe(E(:,1),EpU2(:,1));
    pevU2(2) = pe(E(:,2),EpU2(:,2));
    fprintf('%s: USGS PT-1\n',n);
    fprintf('%s: x: Nf = %04d\tpe = %0.2f\n',n,Nf,pevU2(1))
    fprintf('%s: y: Nf = %04d\tpe = %0.2f\n',n,Nf,pevU2(2))
    fprintf('\n')

end

fprintf('\n')
fprintf('%s: Computing transfer function.\n',n)
[ZR,feR] = transferfnFD(IN(Itr,:),E(Itr,:),dim,meth,df);

if (0)
    I = find(feR > feA(2) & feR < feA(end));
    ZR = ZR(I,:);
    feR = feR(I);
end

HR       = Z2H(feR,ZR,f);
HR       = fftshift(HR,1);
NR       = (size(HR,1)-1)/2;
tR       = [-NR:NR]';

% Apparent Resistivity
for k = 1:size(ZR,2)
    RR(:,k) = 1e6*(mu_0./(2*pi*feR(2:end))).*(abs(ZR(2:end,k)).^2);
end

fprintf('\n')
fprintf('%s: Computing interpolated transfer function.\n',n)
% Interpolate transfer function onto original frequency grid
ZRi = Zinterp(feR,ZR,f);

fprintf('\n')
fprintf('%s: Computing predictions.\n',n)
% Predict using interpolated transfer function
EpR = Zpredict(feR,ZR,IN);

% Transfer Function Phase
PR  = (180/pi)*atan2(imag(ZR),real(ZR));

pev(1) = pe(E(Itr,1),EpR(Itr,1));
pev(2) = pe(E(Itr,2),EpR(Itr,2));
fprintf('\n')
fprintf('%s: In-sample\n',n);
fprintf('%s: x: Nf = %04d\tpe = %0.2f\n',n,Nf,pev(1))
fprintf('%s: y: Nf = %04d\tpe = %0.2f\n',n,Nf,pev(2))

pev(1) = pe(E(Ite,1),EpR(Ite,1));
pev(2) = pe(E(Ite,2),EpR(Ite,2));
fprintf('%s: Out-of-sample\n',n);
fprintf('%s: x: Nf = %04d\tpe = %0.2f\n',n,Nf,pev(1))
fprintf('%s: y: Nf = %04d\tpe = %0.2f\n',n,Nf,pev(2))
fprintf('\n')

fn = 0; % Figure number

if (0)
    fn = fn+1;
    figure(fn);clf;
        hold on;grid on;
        plot(tR/60,HR(:,1),'m','LineWidth',2)
        plot(tR/60,HR(:,2),'b','LineWidth',2)
        plot(tR/60,HR(:,3),'k','LineWidth',2)
        plot(tR/60,HR(:,4),'r','LineWidth',2)
        title(tit)
        legend('H_{xx}','H_{xy}','H_{yx}','H_{yy}')
        %set(gca,'XLim',[-10 20])
        %set(gca,'XTick',[-10:5:20])
        xlabel('t [min]')
        %fname = sprintf('%s_H_%s-%s',short,ts1,ts2);
        %plotcmds(fname,writeimgs)

    fn = fn+1;
    figure(fn);clf;
        loglog(NaN,0,'m','LineWidth',3);
        hold on;grid on;
        loglog(NaN,0,'b','LineWidth',3);
        loglog(NaN,0,'k','LineWidth',3)
        loglog(NaN,0,'r','LineWidth',3)
        loglog(feR(2:end),abs(ZR(2:end,1)),'m','LineWidth',2);
        loglog(feR(2:end),abs(ZR(2:end,2)),'b','LineWidth',2);
        loglog(feR(2:end),abs(ZR(2:end,3)),'k','LineWidth',2);
        loglog(feR(2:end),abs(ZR(2:end,4)),'r','LineWidth',2);
        %loglog(f(2:end),abs(ZRi(2:end,1)),'k.');
        title(tit)
        legend('Z_{xx}','Z_{xy}','Z_{yx}','Z_{yy}')
        xlabel('f [Hz]')
        %fname = sprintf('%s_Z_vs_f_%s-%s',short,ts1,ts2);
        %plotcmds(fname,writeimgs)

    fn = fn+1;
    figure(fn);clf;
        loglog(NaN,0,'m','LineWidth',3);
        hold on;grid on;
        loglog(NaN,0,'b','LineWidth',3);
        loglog(NaN,0,'k','LineWidth',3)
        loglog(NaN,0,'r','LineWidth',3)
        loglog(1./feR(2:end),abs(ZR(2:end,1)),'m','LineWidth',2);
        loglog(1./feR(2:end),abs(ZR(2:end,2)),'b','LineWidth',2);
        loglog(1./feR(2:end),abs(ZR(2:end,3)),'k','LineWidth',2);
        loglog(1./feR(2:end),abs(ZR(2:end,4)),'r','LineWidth',2);
        %loglog(1./f(2:end),abs(ZRi(2:end,1)),'k.');
        title(tit)
        legend('Z_{xx}','Z_{xy}','Z_{yx}','Z_{yy}','Location','SouthEast')
        xlabel('T [s]')
        %fname = sprintf('%s_Z_vs_T_%s-%s',short,ts1,ts2);
        %plotcmds(fname,writeimgs)
end

if (0)
b = logspace(-7,-4);
[NA,xA]   = hist(EpA(:,1)*1e3,b);
[NU1,xU1] = hist(EpU1(:,1),b);
[NU2,xU2] = hist(EpU2(:,1),b);
[NM,xM]   = hist(E(:,1)+Ef(:,1),b)
 
fn = fn+1;
figure(fn);
    clf;
    loglog(xM,NM,'k.','MarkerSize',20);hold on;grid on;
    loglog(xA,NA,'rx','MarkerSize',10);
    loglog(xU1,NU1,'g.','MarkerSize',20)
    loglog(xU2,NU2,'b.','MarkerSize',20)
    legend('Measured','OSU','USGS CP-1','USGS PT-1')
    xlabel('E_x [V/m]')
    ylabel('# in bin')
end

fn = fn+1;
figure(fn);
    clf;
    %loglog(1./feR(2:end),10^(-3)*2*pi*feR(2:end).*abs(ZR(2:end,1)),'m','LineWidth',2);
    %loglog(1./feR(2:end),10^(-3)*2*pi*feR(2:end).*abs(ZR(2:end,3)),'b','LineWidth',2);
    %hold on;grid on;
    %loglog(1./feR(2:end),10^(-3)*2*pi*feR(2:end).*abs(ZR(2:end,2)),'k','LineWidth',2);
    %loglog(1./feR(2:end),10^(-3)*2*pi*feR(2:end).*abs(ZR(2:end,4)),'r','LineWidth',2);
    %title(tit)
    loglog(1./f(1:10:end),abs(ZU1(1:10:end)),'r-','LineWidth',2,'MarkerSize',10);
    hold on;grid on;
    loglog(1./f(1:10:end),abs(ZU2(1:10:end)),'g-','LineWidth',2,'MarkerSize',10);
    loglog(1./feA(2:end),abs(ZA(2:end,1)),'m.','MarkerSize',20);
    loglog(1./feA(2:end),abs(ZA(2:end,2)),'b.','MarkerSize',20);
    loglog(1./feA(2:end),abs(ZA(2:end,3)),'k.','MarkerSize',20);
    loglog(1./feA(2:end),abs(ZA(2:end,4)),'r.','MarkerSize',20);
    %legend('Z_{xy}','Z_{yx}','Z_{xy} OSU','Z_{yx} OSU')
    xlabel('T [s]')

    legend('Z_0 USGS CP-1','Z_0 USGS PT-1','Z_{xx} OSU','Z_{xy} OSU','Z_{yx} OSU','Z_{yy} OSU')

    ylabel('[mV/km/nT]')
    fname = sprintf('%s_%s_Z_vs_T_OSU_USGS_%s-%s',short,label,ts1,ts2);
    plotcmds(fname,writeimgs)

fn = fn+1;
figure(fn);clf;
    %loglog(1./feR(2:end),10^(-3)*2*pi*feR(2:end).*abs(ZR(2:end,1)),'m','LineWidth',2);
    loglog(1./feR(2:end),10^(-3)*2*pi*feR(2:end).*abs(ZR(2:end,3)),'b','LineWidth',2);
    hold on;grid on;
    loglog(1./feR(2:end),10^(-3)*2*pi*feR(2:end).*abs(ZR(2:end,2)),'k','LineWidth',2);
    %loglog(1./feR(2:end),10^(-3)*2*pi*feR(2:end).*abs(ZR(2:end,4)),'r','LineWidth',2);
    %loglog(1./f(2:end),abs(ZRi(2:end,1)),'k.');
    title(tit)
    xlabel('T [s]')

%    plot(1./feA(2:end),abs(ZA(2:end,2)),'b.','MarkerSize',20);
%    hold on;
%    plot(1./f(2:end),abs(ZAi(2:end,2)),'b.','MarkerSize',1);

    %loglog(1./feA,abs(ZA(:,1)),'m.','MarkerSize',20);
    loglog(1./feA(2:end),abs(ZA(2:end,2)),'b.','MarkerSize',20);
    %hold on;
    %loglog(1./f(2:end),abs(ZAi(2:end,2)),'b.','MarkerSize',1);
    loglog(1./feA,abs(ZA(:,3)),'k.','MarkerSize',20);
    %loglog(1./feA,abs(ZA(:,4)),'r.','MarkerSize',20);
    %legend('Z_{xy}','Z_{yx}','Z_{xy} OSU','Z_{yx} OSU')

    loglog(1./f(1:10:end),abs(ZU1(1:10:end)),'r.','MarkerSize',10);
    loglog(1./f(1:10:end),abs(ZU2(1:10:end)),'g.','MarkerSize',10);
    legend('Z_{xy}','Z_{yx}','Z_{xy} OSU','Z_{yx} OSU','Z USGS CP1','Z USGS PT1')

    ylabel('[mV/km/nT]')
    fname = sprintf('%s_%s_Z_vs_T_%s-%s',short,label,ts1,ts2);
    plotcmds(fname,writeimgs)

% Plot B
fn = fn+1;
figure(fn);clf;
    hold on;grid on;
    plot(1,NaN,'r','LineWidth',3)  
    plot(1,NaN,'g','LineWidth',3)  
    hold on;grid on;
    plot(t,B(:,1)/1e-9,'r');
    plot(t,B(:,2)/1e-9,'g');
    xlabel(xlab)
    ylabel('[nT]')
    %title(tit)
    legend('B_x','B_y')
    fname = sprintf('%s_Bx_By_%s-%s',short,ts1,ts2);
    plotcmds(fname,writeimgs)

% Plot E
for i = 1:1
    fn = fn+1;
    figure(fn);clf;
        hold on;grid on;
        comp = 'x';if (i == 2),comp = 'y';end        
        plot(1,NaN,'k','LineWidth',3)  
        plot(1,NaN,'m','LineWidth',3)  
        hold on;grid on;
        plot(t,E(:,i)+5e-5,'k') % Filtered
        a = E(:,i)+Ef(:,i);
        plot(t,a,'m'); % Measured
        xlabel(xlab)
        ylabel('[V/m]')
        %title(tit)
        legend('E_x filtered (shifted)','E_x measured')
        fname = sprintf('%s_%s_E%s_vs_Efiltered_%s-%s',short,label,comp,ts1,ts2);
        plotcmds(fname,writeimgs)
end

% Plot prediction vs model
for i = 1:1
    fn = fn+1;
    figure(fn);clf;
        hold on;grid on;
        if (strmatch(label,'hp','exact'))
            plot(1,NaN,'k','LineWidth',3)  
        end
        plot(1,NaN,'m','LineWidth',3)  
        plot(1,NaN,'r','LineWidth',3)  

        %plot(1,NaN,'b','LineWidth',3)  
        %plot(1,NaN,'g','LineWidth',3)  
        %plot(1,NaN,'g','LineWidth',3,'Color',[0.5,0.5,0.5])
        hold on;grid on;
        if (strmatch(label,'hp','exact'))                
            plot(t,E(:,i)/std(E(:,i)) + 30,'k') % Filtered
        end
        a = E(:,i)+Ef(:,i);
        plot(t,a/std(E(:,i)) + 0,'m')  % Measured
        b = real(EpR(:,i));
        plot(t,b/std(E(:,i)) - 30,'r')
        xlabel(xlab)
        set(gca,'YTickLabel',[])
        title(tit)
        axis([0 t(end) -60 60])
        comp = 'x';if (i == 2),comp = 'y';end
        if (strmatch(label,'hp','exact'))
            legend(...
                    ['E_',comp,' filtered'],...
                    ['E_',comp,' measured'],...
                    sprintf('E_%s predicted; PE = %.2f',comp,pev(i)),...
                    'Location','SouthEast'...
                )
        else
            legend(...
                    ['E_',comp,' measured'],...
                    sprintf('E_%s predicted; PE = %.2f',comp,pev(i)),...
                    'Location','SouthEast'...
                )
        end
    ts1 = datestr(dn(1),30);
    ts2 = datestr(dn(end),30);
    fname = sprintf('%s_%s_E%s_predicted_a_%s-%s',short,label,comp,ts1,ts2);
    plotcmds(fname,writeimgs)
end

% Plot prediction vs model
for i = 1:1
    fn = fn+1;
    figure(fn);
        clf;
        hold on;grid on;
        plot(1,NaN,'m','LineWidth',3)  
        plot(1,NaN,'k','LineWidth',3)  
        plot(1,NaN,'r','LineWidth',3)  
        plot(1,NaN,'b','LineWidth',3)  
        plot(1,NaN,'g','LineWidth',3)  
        plot(1,NaN,'LineWidth',3,'Color',[0.5,0.5,0.5])
        a = E(:,i)+Ef(:,i);
        plot(t,a,'m');hold on;grid on;
        plot(t,E(:,i),'k')
        plot(t,EpA(:,i),'r')
        plot(t,EpR(:,i),'b')
        plot(t,EpU1(:,i),'g')
        plot(t,EpU2(:,i),'Color',[0.5,0.5,0.5])
        xlabel(xlab)
%        set(gca,'YTickLabel',[])
        title(tit)
%        axis([0 t(end) -50 50])
        comp = 'x';if (i == 2),comp = 'y';end
        legend(...
                ['E_',comp,' measured'],...
                ['E_',comp,' filtered'],...
                sprintf('E_%s predicted; PE = %.2f',comp,pev(i)),...
                sprintf('E_%s OSU predicted; PE = %.2f',comp,pevA(i)),...
                sprintf('E_%s CP-1 predicted; PE = %.2f',comp,pevU1(i)),...
                sprintf('E_%s PT-1 predicted; PE = %.2f',comp,pevU2(i)),...
                'Location','SouthEast'...
            )
    ts1 = datestr(dn(1),30);
    ts2 = datestr(dn(end),30);
    fname = sprintf('%s_%s_E%s_predicted_%s-%s',short,label,comp,ts1,ts2);
    plotcmds(fname,writeimgs)
end
break


break
fn = fn+1;
figure(fn);clf
    plot(NaN,0,'b','LineWidth',3);
    hold on;grid on;
    plot(NaN,0,'k','LineWidth',3)
    plot(feR(2:end),PR(2:end,1),'m','LineWidth',2);
    plot(feR(2:end),PR(2:end,2),'b','LineWidth',2);
    plot(feR(2:end),PR(2:end,3),'k','LineWidth',2);
    plot(feR(2:end),PR(2:end,4),'r','LineWidth',2);
    title(tit)
    legend('\phi_{xx}','\phi_{xy}','\phi_{yx}','\phi_{yy}')
    xlabel('f [Hz]')
    fname = sprintf('%s_Phase_vs_f_%s-%s',short,ts1,ts2);
    plotcmds(fname,writeimgs)

fn = fn+1;
figure(fn);clf
    semilogx(NaN,0,'b','LineWidth',3);
    hold on;grid on;
    semilogx(NaN,0,'k','LineWidth',3)
    semilogx(1./feR(2:end),PR(2:end,1),'m','LineWidth',2);
    semilogx(1./feR(2:end),PR(2:end,2),'b','LineWidth',2);
    semilogx(1./feR(2:end),PR(2:end,3),'k','LineWidth',2);
    semilogx(1./feR(2:end),PR(2:end,4),'r','LineWidth',2);
    title(tit)
    legend('\phi_{xx}','\phi_{xy}','\phi_{yx}','\phi_{yy}')
    xlabel('T [s]')
    fname = sprintf('%s_Phase_vs_T_%s-%s',short,ts1,ts2);
    plotcmds(fname,writeimgs)

t = [0:size(E,1)-1]'/86400;

ts1 = datestr(dn(1),30);
ts2 = datestr(dn(end),30);

% Plot input and output on same scale
for i = 1:2
    fn = fn+1;
    figure(fn);clf;
        plot(NaN,0,'g','LineWidth',3);
        hold on;grid on;
        plot(NaN,0,'m','LineWidth',3)
        if (i == 1)
            plot(t,IN(:,2),'g');
            plot(t,E(:,1),'m');
            legend(INs{2},'E_x')
            fname = sprintf('%s_%s_E_x_%s-%s',short,INs2{2},ts1,ts2);
        else
            plot(t,IN(:,1),'g');
            plot(t,E(:,2),'m');
            legend(INs{1},'E_y')
            fname = sprintf('%s_%s_E_y_%s-%s',short,INs2{1},ts1,ts2);
        end

        xlabel(xlab)
        title(tit)
        plotcmds(fname,writeimgs)
end

% Plot prediction vs model
for i = 1:1
    fn = fn+1;
    figure(fn);clf;
        hold on;grid on;
        plot(1,NaN,'m','LineWidth',3)  
        plot(1,NaN,'k','LineWidth',3)  
        plot(1,NaN,'r','LineWidth',3)  
        plot(1,NaN,'g','LineWidth',3)  
        plot(t,(E(:,i)+Ef(:,i)),'m')  
        plot(t,E(:,i),'k')
        plot(t,real(EpR(:,i)),'r')
        plot(t,real(EpA(:,2))*1e3,'g')
        xlabel(xlab)
        ylabel('V/m')
        title(tit)
        comp = 'x';if (i == 2),comp = 'y';end
        legend(...
                ['E_',comp,' measured'],...
                ['E_',comp,' filtered'],...
                sprintf('E_%s predicted; PE = %.2f',comp,pev(i)),...
                sprintf('E_%s predicted OSU; PE = %.2f',comp,pevA(i)),...
                sprintf('E_%s predicted CP1; PE = %.2f',comp,pevU1(i))...
            )
    ts1 = datestr(dn(1),30);
    ts2 = datestr(dn(end),30);
    fname = sprintf('%s_E%s_predicted_%s-%s',short,comp,ts1,ts2);
    plotcmds(fname,writeimgs)
end

break

% 1 day of predictions per plot
ta = [0:size(E,1)-1]'/3600;
Nd = floor(size(E,1)/86400);

for j = [1:Nd]
    I = [86400*(j-1)+1:86400*j];
    t = ta(I)-ta(I(1));
    for i = 1:2
        pev(i) = pe(E(I,i)-Ef(I,i),EpR(I,i));
        comp = 'x';
        if (i == 2)
            comp = 'y';
        end
        fprintf('dir = %s\tNf = %04d\tpe = %0.2f\n',comp,Nf,pev(i))
        
        fn = fn+1;
        figure(fn);clf;
            
            plot(NaN,0,'b','LineWidth',3);hold on 
            plot(NaN,0,'k','LineWidth',3)  
            plot(NaN,0,'r','LineWidth',3)  

            plot(t,E(I,i),'b')  
            hold on;grid on;
            plot(t,E(I,i)-Ef(I,i),'k')
            plot(t,real(EpR(I,i)),'r')
            title(tit)
            xlab = ['Hours since ',datestr(dn(I(1)))];
            xlabel(xlab)
            set(gca,'XTick',[0:4:24])
            set(gca,'XLim',[0 24])
            legend(...
                    ['E_',comp,' measured'],...
                    ['E_',comp,' filtered'],...
                    sprintf('E_%s predicted; PE = %.2f',comp,pev(i))...
                )
            title(tit)
            ts = datestr(dn(I(1)),30);
            fname = sprintf('%s_E%s_predicted_%s',short,comp,ts);
            plotcmds(fname,writeimgs)
    end
end

